{"map":"{\"version\":3,\"file\":\"headers.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helper/headers.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAA;AAGjD,SAAS,mBAAmB,CAAC,OAAY,EAAE,cAAsB;IAC/D,IAAI,CAAC,OAAO,EAAE;QACZ,OAAM;KACP;IACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;QAC/B,IAAI,IAAI,KAAK,cAAc,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,cAAc,CAAC,WAAW,EAAE,EAAE;YAClF,OAAO,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;YACvC,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA;SACrB;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAY,EAAE,IAAS;IACpD,mBAAmB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAA;IAE5C,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;QACvB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YACvC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC,CAAA;SAC3D;KACF;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,OAAe;IAC1C,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAChC,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,MAAM,CAAA;KACd;IAED,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;QAC5B,IAAA,oBAAgC,EAA/B,WAAG,EAAE,kBAA0B,CAAA;QACpC,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAA;QAC9B,IAAI,CAAC,GAAG,EAAE;YACR,OAAM;SACP;QACD,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;QACjC,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;IACnB,CAAC,CAAC,CAAA;IAEF,OAAO,MAAM,CAAA;AACf,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAY,EAAE,MAAc;IACzD,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,OAAO,CAAA;KACf;IAED,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAA;IAE7D,IAAM,cAAc,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAA;IAC7F,cAAc,CAAC,OAAO,CAAC,UAAA,MAAM;QAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,CAAA;IACxB,CAAC,CAAC,CAAA;IAEF,OAAO,OAAO,CAAA;AAChB,CAAC\"}","code":"import { isPlainObject, deepMerge } from './util';\r\nfunction normalizeHeaderName(headers, normalizedName) {\r\n    if (!headers) {\r\n        return;\r\n    }\r\n    Object.keys(headers).forEach(function (name) {\r\n        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\r\n            headers[normalizedName] = headers[name];\r\n            delete headers[name];\r\n        }\r\n    });\r\n}\r\nexport function processHeaders(headers, data) {\r\n    normalizeHeaderName(headers, 'Content-Type');\r\n    if (isPlainObject(data)) {\r\n        if (headers && !headers['Content-Type']) {\r\n            headers['Content-Type'] = 'application/json;charset=UTF-8';\r\n        }\r\n    }\r\n    return headers;\r\n}\r\nexport function parseHeaders(headers) {\r\n    var parsed = Object.create(null);\r\n    if (!headers) {\r\n        return parsed;\r\n    }\r\n    headers.split('\\r\\n').forEach(function (line) {\r\n        var _a = line.split(':'), key = _a[0], vals = _a.slice(1);\r\n        key = key.trim().toLowerCase();\r\n        if (!key) {\r\n            return;\r\n        }\r\n        var val = vals.join(':').trim();\r\n        parsed[key] = val;\r\n    });\r\n    return parsed;\r\n}\r\nexport function flattenHeaders(headers, method) {\r\n    if (!headers) {\r\n        return headers;\r\n    }\r\n    headers = deepMerge(headers.common, headers[method], headers);\r\n    var methodToDelete = ['delete', 'get', 'head', 'options', 'post', 'put', 'patch', 'common'];\r\n    methodToDelete.forEach(function (method) {\r\n        delete headers[method];\r\n    });\r\n    return headers;\r\n}\r\n//# sourceMappingURL=headers.js.map","dts":{"name":"D:/ts-axios/dist/types/helper/headers.d.ts","writeByteOrderMark":false,"text":"import { Method } from '../types';\r\nexport declare function processHeaders(headers: any, data: any): any;\r\nexport declare function parseHeaders(headers: string): any;\r\nexport declare function flattenHeaders(headers: any, method: Method): any;\r\n"}}
